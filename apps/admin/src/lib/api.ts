/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Speakit API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query'
import type { Getapifeeds200, Apifeeds } from './schema'
import { useClient } from './client'

/**
 * @summary GET /api/feeds
 */
export const useGetapifeedsHook = () => {
  const getapifeeds = useClient<Getapifeeds200>()

  return (signal?: AbortSignal) => {
    return getapifeeds({ url: `/api/feeds`, method: 'get', signal })
  }
}

export const getGetapifeedsQueryKey = () => [`/api/feeds`] as const

export const useGetapifeedsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetapifeedsHook>>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetapifeedsHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetapifeedsHook>>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetapifeedsQueryKey()

  const getapifeeds = useGetapifeedsHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetapifeedsHook>>>> = ({ signal }) =>
    getapifeeds(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetapifeedsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetapifeedsHook>>>>
export type GetapifeedsQueryError = unknown

/**
 * @summary GET /api/feeds
 */
export const useGetapifeeds = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetapifeedsHook>>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetapifeedsHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetapifeedsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary POST /api/feeds
 */
export const usePostapifeedsHook = () => {
  const postapifeeds = useClient<Apifeeds>()

  return () => {
    return postapifeeds({ url: `/api/feeds`, method: 'post' })
  }
}

export const usePostapifeedsMutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostapifeedsHook>>>,
    TError,
    TVariables,
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostapifeedsHook>>>, TError, TVariables, TContext> => {
  const { mutation: mutationOptions } = options ?? {}

  const postapifeeds = usePostapifeedsHook()

  const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostapifeedsHook>>>, TVariables> = () => {
    return postapifeeds()
  }

  return { mutationFn, ...mutationOptions }
}

export type PostapifeedsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostapifeedsHook>>>>

export type PostapifeedsMutationError = unknown

/**
 * @summary POST /api/feeds
 */
export const usePostapifeeds = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostapifeedsHook>>>,
    TError,
    TVariables,
    TContext
  >
}) => {
  const mutationOptions = usePostapifeedsMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary DELETE /api/feeds/{id}
 */
export const useDeleteapifeedsidHook = () => {
  const deleteapifeedsid = useClient<Apifeeds>()

  return (id: string) => {
    return deleteapifeedsid({ url: `/api/feeds/${id}`, method: 'delete' })
  }
}

export const useDeleteapifeedsidMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteapifeedsidHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useDeleteapifeedsidHook>>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const deleteapifeedsid = useDeleteapifeedsidHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useDeleteapifeedsidHook>>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteapifeedsid(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteapifeedsidMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useDeleteapifeedsidHook>>>
>

export type DeleteapifeedsidMutationError = unknown

/**
 * @summary DELETE /api/feeds/{id}
 */
export const useDeleteapifeedsid = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteapifeedsidHook>>>,
    TError,
    { id: string },
    TContext
  >
}) => {
  const mutationOptions = useDeleteapifeedsidMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary GET /api/feeds/{id}
 */
export const useGetapifeedsidHook = () => {
  const getapifeedsid = useClient<Apifeeds>()

  return (id: string, signal?: AbortSignal) => {
    return getapifeedsid({ url: `/api/feeds/${id}`, method: 'get', signal })
  }
}

export const getGetapifeedsidQueryKey = (id: string) => [`/api/feeds/${id}`] as const

export const useGetapifeedsidQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetapifeedsidHook>>>,
  TError = unknown,
>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetapifeedsidHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetapifeedsidHook>>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetapifeedsidQueryKey(id)

  const getapifeedsid = useGetapifeedsidHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetapifeedsidHook>>>> = ({ signal }) =>
    getapifeedsid(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions }
}

export type GetapifeedsidQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetapifeedsidHook>>>>
export type GetapifeedsidQueryError = unknown

/**
 * @summary GET /api/feeds/{id}
 */
export const useGetapifeedsid = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetapifeedsidHook>>>,
  TError = unknown,
>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetapifeedsidHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetapifeedsidQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
