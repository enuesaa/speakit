/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Speakit API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query'
import type {
  Getfeeds200,
  Empty,
  Feeds,
  FeedsWithMetadata,
  Fetch,
  Getprograms200,
  ProgramsWithMetadata,
  Convert,
} from './schema'
import { useClient } from './client'

/**
 * @summary GET /feeds
 */
export const useGetfeedsHook = () => {
  const getfeeds = useClient<Getfeeds200>()

  return (signal?: AbortSignal) => {
    return getfeeds({ url: `/feeds`, method: 'get', signal })
  }
}

export const getGetfeedsQueryKey = () => [`/feeds`] as const

export const useGetfeedsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetfeedsHook>>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetfeedsHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetfeedsHook>>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetfeedsQueryKey()

  const getfeeds = useGetfeedsHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetfeedsHook>>>> = ({ signal }) =>
    getfeeds(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetfeedsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetfeedsHook>>>>
export type GetfeedsQueryError = unknown

/**
 * @summary GET /feeds
 */
export const useGetfeeds = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetfeedsHook>>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetfeedsHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetfeedsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary POST /feeds
 */
export const usePostfeedsHook = () => {
  const postfeeds = useClient<Empty>()

  return (feeds: Feeds) => {
    return postfeeds({ url: `/feeds`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: feeds })
  }
}

export const usePostfeedsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostfeedsHook>>>,
    TError,
    { data: Feeds },
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostfeedsHook>>>, TError, { data: Feeds }, TContext> => {
  const { mutation: mutationOptions } = options ?? {}

  const postfeeds = usePostfeedsHook()

  const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostfeedsHook>>>, { data: Feeds }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return postfeeds(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostfeedsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostfeedsHook>>>>
export type PostfeedsMutationBody = Feeds
export type PostfeedsMutationError = unknown

/**
 * @summary POST /feeds
 */
export const usePostfeeds = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostfeedsHook>>>,
    TError,
    { data: Feeds },
    TContext
  >
}) => {
  const mutationOptions = usePostfeedsMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary DELETE /feeds/{id}
 */
export const useDeletefeedsidHook = () => {
  const deletefeedsid = useClient<Empty>()

  return (id: string) => {
    return deletefeedsid({ url: `/feeds/${id}`, method: 'delete' })
  }
}

export const useDeletefeedsidMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeletefeedsidHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useDeletefeedsidHook>>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const deletefeedsid = useDeletefeedsidHook()

  const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeletefeedsidHook>>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return deletefeedsid(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletefeedsidMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeletefeedsidHook>>>>

export type DeletefeedsidMutationError = unknown

/**
 * @summary DELETE /feeds/{id}
 */
export const useDeletefeedsid = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeletefeedsidHook>>>,
    TError,
    { id: string },
    TContext
  >
}) => {
  const mutationOptions = useDeletefeedsidMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary GET /feeds/{id}
 */
export const useGetfeedsidHook = () => {
  const getfeedsid = useClient<FeedsWithMetadata>()

  return (id: string, signal?: AbortSignal) => {
    return getfeedsid({ url: `/feeds/${id}`, method: 'get', signal })
  }
}

export const getGetfeedsidQueryKey = (id: string) => [`/feeds/${id}`] as const

export const useGetfeedsidQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetfeedsidHook>>>,
  TError = unknown,
>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetfeedsidHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetfeedsidHook>>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetfeedsidQueryKey(id)

  const getfeedsid = useGetfeedsidHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetfeedsidHook>>>> = ({ signal }) =>
    getfeedsid(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions }
}

export type GetfeedsidQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetfeedsidHook>>>>
export type GetfeedsidQueryError = unknown

/**
 * @summary GET /feeds/{id}
 */
export const useGetfeedsid = <TData = Awaited<ReturnType<ReturnType<typeof useGetfeedsidHook>>>, TError = unknown>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetfeedsidHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetfeedsidQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary POST /feeds/{id}/fetch
 */
export const usePostfeedsidfetchHook = () => {
  const postfeedsidfetch = useClient<Empty>()

  return (id: string, fetch: Fetch) => {
    return postfeedsidfetch({
      url: `/feeds/${id}/fetch`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fetch,
    })
  }
}

export const usePostfeedsidfetchMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostfeedsidfetchHook>>>,
    TError,
    { id: string; data: Fetch },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostfeedsidfetchHook>>>,
  TError,
  { id: string; data: Fetch },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const postfeedsidfetch = usePostfeedsidfetchHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostfeedsidfetchHook>>>,
    { id: string; data: Fetch }
  > = (props) => {
    const { id, data } = props ?? {}

    return postfeedsidfetch(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostfeedsidfetchMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostfeedsidfetchHook>>>
>
export type PostfeedsidfetchMutationBody = Fetch
export type PostfeedsidfetchMutationError = unknown

/**
 * @summary POST /feeds/{id}/fetch
 */
export const usePostfeedsidfetch = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostfeedsidfetchHook>>>,
    TError,
    { id: string; data: Fetch },
    TContext
  >
}) => {
  const mutationOptions = usePostfeedsidfetchMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary GET /programs
 */
export const useGetprogramsHook = () => {
  const getprograms = useClient<Getprograms200>()

  return (signal?: AbortSignal) => {
    return getprograms({ url: `/programs`, method: 'get', signal })
  }
}

export const getGetprogramsQueryKey = () => [`/programs`] as const

export const useGetprogramsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetprogramsHook>>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetprogramsHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetprogramsHook>>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetprogramsQueryKey()

  const getprograms = useGetprogramsHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetprogramsHook>>>> = ({ signal }) =>
    getprograms(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetprogramsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetprogramsHook>>>>
export type GetprogramsQueryError = unknown

/**
 * @summary GET /programs
 */
export const useGetprograms = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetprogramsHook>>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetprogramsHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetprogramsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary DELETE /programs/{id}
 */
export const useDeleteprogramsidHook = () => {
  const deleteprogramsid = useClient<Empty>()

  return (id: string) => {
    return deleteprogramsid({ url: `/programs/${id}`, method: 'delete' })
  }
}

export const useDeleteprogramsidMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteprogramsidHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useDeleteprogramsidHook>>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const deleteprogramsid = useDeleteprogramsidHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useDeleteprogramsidHook>>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteprogramsid(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteprogramsidMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useDeleteprogramsidHook>>>
>

export type DeleteprogramsidMutationError = unknown

/**
 * @summary DELETE /programs/{id}
 */
export const useDeleteprogramsid = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteprogramsidHook>>>,
    TError,
    { id: string },
    TContext
  >
}) => {
  const mutationOptions = useDeleteprogramsidMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary GET /programs/{id}
 */
export const useGetprogramsidHook = () => {
  const getprogramsid = useClient<ProgramsWithMetadata>()

  return (id: string, signal?: AbortSignal) => {
    return getprogramsid({ url: `/programs/${id}`, method: 'get', signal })
  }
}

export const getGetprogramsidQueryKey = (id: string) => [`/programs/${id}`] as const

export const useGetprogramsidQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetprogramsidHook>>>,
  TError = unknown,
>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetprogramsidHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetprogramsidHook>>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetprogramsidQueryKey(id)

  const getprogramsid = useGetprogramsidHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetprogramsidHook>>>> = ({ signal }) =>
    getprogramsid(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions }
}

export type GetprogramsidQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetprogramsidHook>>>>
export type GetprogramsidQueryError = unknown

/**
 * @summary GET /programs/{id}
 */
export const useGetprogramsid = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetprogramsidHook>>>,
  TError = unknown,
>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetprogramsidHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetprogramsidQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary POST /programs/{id}/convert
 */
export const usePostprogramsidconvertHook = () => {
  const postprogramsidconvert = useClient<Empty>()

  return (id: string, convert: Convert) => {
    return postprogramsidconvert({
      url: `/programs/${id}/convert`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: convert,
    })
  }
}

export const usePostprogramsidconvertMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostprogramsidconvertHook>>>,
    TError,
    { id: string; data: Convert },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostprogramsidconvertHook>>>,
  TError,
  { id: string; data: Convert },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const postprogramsidconvert = usePostprogramsidconvertHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostprogramsidconvertHook>>>,
    { id: string; data: Convert }
  > = (props) => {
    const { id, data } = props ?? {}

    return postprogramsidconvert(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostprogramsidconvertMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostprogramsidconvertHook>>>
>
export type PostprogramsidconvertMutationBody = Convert
export type PostprogramsidconvertMutationError = unknown

/**
 * @summary POST /programs/{id}/convert
 */
export const usePostprogramsidconvert = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostprogramsidconvertHook>>>,
    TError,
    { id: string; data: Convert },
    TContext
  >
}) => {
  const mutationOptions = usePostprogramsidconvertMutationOptions(options)

  return useMutation(mutationOptions)
}
